package app.theater.areas;

import java.util.*;

import app.theater.performances.Performance;
import app.theater.performances.tickets.Ticket;

/**
 * Class SimpleArea
 * @author Pablo Cuesta Sierra (pablo.cuestas@estudiante.uam.es), 
 *         Pablo Fernández Alegre (pablo.fernandezalegre@estudiante.uam.es) 
 *         Álvaro Zamanillo Sáez (alvaro.zamanillo@estudiante.uam.es)
 *
 */
public abstract class SimpleArea extends Area {
	private static final long serialVersionUID = 1800281504413930947L;
	
	private double annualPassPrice = -1;

	/**
	 * Constructor of simple area
	 * @param name name of the simple area
	 */
	public SimpleArea(String name) {
		super(name);
	}

    /**
	 * Gets the simple area(s) of the area (overriden in composite area)
	 * @return list with the area(s)
	 */
    @Override
    public List<SimpleArea> getSimpleAreas(){
		return new ArrayList<>(Arrays.asList(this));
	}

    /**
     * Gets the tickets generated by the area for a performance
     * @param restriction restriction to be applied to the generation
     * @param performance performance for which the tickets are selected
     * @return list with the tickets
     */
    public abstract List<Ticket> getTickets(double restriction, Performance performance);

    /**
     * Setter for the price of a pass in this area
     * @param price price of the pass
     */
    @Override
    public void setAnnualPassPrice(double price){
        this.annualPassPrice = price;
    }
    
    /**
     * Annual Pass price for this area
     * @return the annual pass price for the area
     */
	public double getAnnualPassPrice() {
		return this.annualPassPrice;
	}

    /**
     * Returns itself if the name passed as parameter is the area's name
     * @return itself if the name is equal or null
     */
    public Area getArea(String name){
        if(this.getName().equals(name))
            return this;
        
        return null;
    }

    /**
     * Returns an empty list
     * @return empty list
     */
    @Override
    public List<Area> getAreas(){
        return Collections.emptyList();
    }

    
}