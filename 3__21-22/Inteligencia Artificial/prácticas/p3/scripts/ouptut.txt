
BEGIN TESTING

sum_pot_prod([1,2,3],[3,4,5], 1, X).
X = 26.


sum_pot_prod([1,2,3],[3,4,5], 2, X).
X = 298.


sum_pot_prod([1,2,3],[3,4,5], -1, _).
'ERROR 1.1 Potencia'
false.


sum_pot_prod([1,2,3],[3,4,5,6], 3, _).
'ERROR 1.2 Longitud'
false.


segundo_penultimo([1,2], X, Y).
X = 2,
Y = 1 
segundo_penultimo([1,2,3], X, Y).
X = Y, Y = 2 
segundo_penultimo([1,2,3,4], X, Y).
X = 2,
Y = 3 
segundo_penultimo([1], X, Y).
'ERROR 2.1 Longitud'
false.


sublista(['a','b','c','d','e'], 2, 4, 'b', X).
X = [b, c, d].


sublista(['a','b','c','d','e'], 2, 4, 'f', X).
'ERROR 3.1 Elemento'
false.


sublista(['a','b','c','d','e'], 5, 4, 'b', X).
'ERROR 3.2 Indices.'
false.


espacio_lineal(0, 1, 5, L).
L = [0, 0.25, 0.5, 0.75, 1].


espacio_lineal(0, 1, 100, L).
L = [0, 0.010101010101010102, 0.020202020202020204, 0.030303030303030304, 0.04040404040404041, 0.050505050505050504, 0.06060606060606061, 0.0707070707070707, 0.08080808080808081|...].


espacio_lineal(2,0,3,L).
'ERROR 4.1 Indices'
false.


normalizar([3,4,5], X).
X = [0.25, 0.3333333333333333, 0.4166666666666667].


normalizar([1,2,3,4,5], X).
X = [0.06666666666666667, 0.13333333333333333, 0.2, 0.26666666666666666, 0.3333333333333333].


normalizar([-1,2,3,4,5], X).
'ERROR 5.1 Negativos'
false.


divergencia_kl([0.2, 0.3, 0.5], [0.2, 0.3, 0.5], D).
D = 0.0.


divergencia_kl([0.5, 0.3, 0.2], [0.2, 0.3, 0.5], D).
D = 0.27488721956224654.


divergencia_kl([0.98, 0.01, 0.01], [0.01, 0.01, 0.98], D).
D = 4.447418454310455.


divergencia_kl([0.99, 0.0, 0.01], [0.01, 0.01, 0.98], D).
'ERROR 6.1 Divergencia KL no definida.'
false.


divergencia_kl([0.2,0.3,0.6], [0.1,0.5,0.4], D).
'ERROR 6.2 Divergencia KL definida solo para distribuciones.'
false.


producto_kronecker([[1,2],[3,4]], [[0,5], [6,7]], R).
R = [[[[0, 5], [6, 7]], [[0, 10], [12, 14]]], [[[0, 15], [18, 21]], [[0, 20], [24, 28]]]].


producto_kronecker([[-1,2],[3,4]], [[0,5], [6,7]], R).
'ERROR 7.1 Elemento menor que cero.'
false.


distancia_euclidea([1,4,3], [1,2,1], D).
D = 2.8284271247461903.


distancia_euclidea([1,2,1], [1,2,1], D).
D = 0.0.


calcular_distancias([[1,2,3],[1,2,4],[2,3,1]], [[1,2,1], [1,2,5]], D).
D = [[2.0, 3.0, 1.4142135623730951], [2.0, 1.0, 4.242640687119285]].


calcular_distancias([[1,2,3,4],[1,2,4,5],[2,3,1,5]], [[1,2,1,2], [1,2,5,2], [1,2,3,4], [5,6,7,8], [9,10,11,12]], D).
D = [[2.8284271247461903, 4.242640687119285, 3.3166247903554003], [2.8284271247461903, 3.1622776601683795, 5.196152422706631], [0.0, 1.4142135623730951, 2.6457513110645907], [8.0, 7.0710678118654755, 7.937253933193772], [16.0, 15.033296378372908, 15.716233645501712]].


predecir_etiquetas(['a','b','a','a','a','a','d'], 3, [[12,32,11,3,44,32,0], [1,2,3,4,5,6,7]],Etiquetas).
Etiquetas = [a, a] 
predecir_etiquetas(['c','b','a','a','a','a','d'], 1, [[12,32,11,3,44,32,0], [1,2,3,4,5,6,7]],Etiquetas).
Etiquetas = [d, c].


predecir_etiqueta(['a','b','a','a','a','a','d'], 3, [12,32,11,3,44,32,0], Etiqueta).
Etiqueta = a 
predecir_etiqueta(['a','b','a','a','a','a','d'], 1, [12,32,11,3,44,32,0], Etiqueta).
Etiqueta = d.


calcular_K_etiquetas_mas_relevantes(['a','b','a','b','c','a','d'], 1, [12,32,11,3,1,2,0],Etiquetas).
Etiquetas = [d].


calcular_K_etiquetas_mas_relevantes(['a','b','a','a','a','a','d'], 3, [12,32,11,3,44,32,0],Etiquetas).
Etiquetas = [d, a, a] 
calcular_etiqueta_mas_relevante(['a','c','c'], E).
E = c.


calcular_etiqueta_mas_relevante(['a','b','a','c','d','b','a','c','a'], E).
E = a.


calcular_contadores(['a','b','a','c','c','c'], L).
L = [[3, c], [2, a], [1, b]].


k_vecinos_proximos([[2,3,1], [3,4,5], [2,3,2], [4,5,6], [6,5,8], [1,0,2], [3,4,3]],['a','b','a','c','c','a','b'], 1, [[10,7,5], [2,3,1]], Etiquetas).
Etiquetas = [c, a].


k_vecinos_proximos([[2,3,1], [3,4,5], [2,3,2], [4,5,6], [6,5,8], [1,0,2], [3,4,3]],['a','b','a','c','c','a','b'], 7, [[3,4,3], [10,10,10]], Etiquetas).
Etiquetas = [a, a] 

END TESTING

